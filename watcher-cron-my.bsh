#!/bin/bash
#*
#*----------------------------------------------------------------------------------------
#*
#* All software provided below is unsupported and provided as-is, without warranty 
#* of any kind.
#*
#* To the extent possible under law, Red Hat, Inc. has dedicated all copyright
#* to this software to the public domain worldwide, pursuant to the CC0 Public
#* Domain Dedication. This software is distributed without any warranty.
#* See <http://creativecommons.org/publicdomain/zero/1.0/>.
#*
#*----------------------------------------------------------------------------------------
#*
#* Maintainer: bubrown@redhat.com
#
# watcher-cron.bsh V02.501
#
# $1 = interval
# $2 = interations
# $3 = log directory
# $4 = days of logs to keep
# $5 = compression level (optional)
#      0 - no compression           (previous default)
#      1 - end-of-batch compression (new default, about a 10:1 compression ratio observed)
#      2 - '1' + use gzip, if available, inline with top output creation
#      3 - '2' + use gzip all commands except vmstat
#
# crontab -u root -e
# 21 * * * * bash  /<path>/watcher-cron.bsh 30 120 /<logdir>  2
#
if [ "$4" == "" ]
then
echo " "
echo "missing arguments:"
echo "------------------"
echo " arg1 = interval,    e.g. 1             (in seconds)"
echo " arg2 = interations, e.g. 720           (count of samples to take)"
echo "                                        (from cron arg1 x arg2 = 3600 seconds, 1hr)"
echo " arg3 = log path,    e.g. /tmp/watcher  (where to create log files)"
echo " arg4 = days,        e.g. 2             (anything older than this is purged from log path)"
echo "------------------"
echo " "
exit
fi
# -p is exclusive of -x on RHEL5*
# -p is required along with -x on RHEL6* to get partitions included
_pflg=""
if [[ `uname -a` == *2.6.32* ]]
then
 _pflg="-p"
fi
_compress_hourly=1
_compress_top=""
_compress_all=""
_ext_top=""
_ext_all=""
if [ "$5" != "" ]
then
  if [ $5 -eq 0 ]
  then
     _compress_hourly=0
  fi
  if [ -e "/usr/bin/gzip" ]
  then
    if [ $5 -ge 2 ]
    then
      _compress_top=" | gzip - "
      _ext_top=".gz"
    fi
    if [ $5 -ge 3 ]
    then
      _compress_all=" | gzip - "
      _ext_all=".gz"
     fi
  fi
fi
_wait_til_complete=0
if [ $_compress_hourly -gt 0 ]
then
   _wait_til_complete=1
fi
_time=$(date +%Y%m%d-%H%M%S)
_name=$(uname -a)
#echo $1 seconds x $2 intervals, at ${_time}
echo '#TIME=     '${_time}         >  $3/${_time}-info-vmstat.log
echo '#INTERVAL= '$1               >> $3/${_time}-info-vmstat.log
echo '#COUNT=    '$2               >> $3/${_time}-info-vmstat.log
echo '#UNAME=   "'${_name}'"'      >> $3/${_time}-info-vmstat.log
#
echo '#TIME=     '${_time}         >  $3/${_time}-info-vmstat-d.log
echo '#INTERVAL= '$1               >> $3/${_time}-info-vmstat-d.log
echo '#COUNT=    '$2               >> $3/${_time}-info-vmstat-d.log
echo '#UNAME=   "'${_name}'"'      >> $3/${_time}-info-vmstat-d.log
#
 eval "echo '#UNAME=   \"${_name}\"'      ${_compress_all} >  $3/${_time}-info-iostat.log${_ext_all}"
#eval "iostat $1 $2 -t -k -x ${_pflg} -n  ${_compress_all} >> $3/${_time}-info-iostat.log${_ext_all} &"
#eval "iostat $1 $2 -t -k -x ${_pflg}     ${_compress_all} >> $3/${_time}-info-iostat.log${_ext_all} &"
       vmstat $1 $2                                        >> $3/${_time}-info-vmstat.log &
       vmstat $1 $2 -d                                     >> $3/${_time}-info-vmstat-d.log &
 eval "top -H -b -d $1 -n $2                ${_compress_top} >  $3/${_time}-info-top.log${_ext_top} &"
 eval "ps aux                ${_compress_top} >  $3/${_time}-info-ps-aux.log${_ext_top} &"
 eval "mpstat $1 $2 -P ALL                ${_compress_all} >  $3/${_time}-info-mpstat.log${_ext_all} &"
#
#echo '#TIME=     '${_time}        >  $3/${_time}-info-netstat.log
#netstat -sc $1                    >> $3/${_time}-info-netstat.log & netpid=$!
#nohup watch --interval=$1 'echo "m" > /proc/sysrq-trigger' 2> /dev/null & rqmpid=$!
#nohup watch --interval=$1 "echo -e '\n'$(date) >> $3/${_time}-info-meminfo.log ; cat /proc/meminfo >> $3/${_time}-info-meminfo.log" 2> /dev/null & mipid=$!
#nohup watch --interval=$1 "echo -e '\n'$(date) >> $3/${_time}-info-mountss.log ; cat /proc/self/mountstats >> $3/${_time}-info-mountss.log" 2> /dev/null & mntpid=$!
#nohup watch --interval=$1 "echo -e '\n'$(date) >> $3/${_time}-info-nfsstat.log ; /usr/sbin/nfsstat -o all >> $3/${_time}-info-nfsstat.log" 2> /dev/null & nfspid=$!
#_wait_til_complete=1
if [ $_wait_til_complete -gt 0 ]
then
  sleep $(( $1 * $2 ))
# kill -9 $netpid
# kill -9 $rqmpid
# kill -9 $mipid
# kill -9 $mntpid
# kill -9 $nfspid
fi
find $3/*-info-*.log -mtime +$4 -exec rm -f {} \;
#
if [ $_compress_hourly -gt 0 ]
then
  sleep $(( $1 + 22 ))
  ls -lh     $3/${_time}-info*.log*                    > $3/${_time}-info-files.log
  ls -1c     $3 | grep ${_time}-info | grep log        > $3/${_time}-files.txt
  tar -C $3 -T $3/${_time}-files.txt --remove-files -czf $3/${_time}-info.tar.gz
  rm -f $3/${_time}-files.txt
fi
